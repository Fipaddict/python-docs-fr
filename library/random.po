# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2016, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-10-30 10:42+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../Doc/library/random.rst:2
msgid ":mod:`random` --- Generate pseudo-random numbers"
msgstr ":mod:`random` --- Génère des nombres pseudo-aléatoires"

#: ../Doc/library/random.rst:7
msgid "**Source code:** :source:`Lib/random.py`"
msgstr "**Code source :** :source:`Lib/random.py`"

#: ../Doc/library/random.rst:11
msgid ""
"This module implements pseudo-random number generators for various "
"distributions."
msgstr ""
"Ce module implémente des générateurs de nombres pseudo-aléatoires pour "
"différentes distributions."

#: ../Doc/library/random.rst:14
msgid ""
"For integers, there is uniform selection from a range. For sequences, there "
"is uniform selection of a random element, a function to generate a random "
"permutation of a list in-place, and a function for random sampling without "
"replacement."
msgstr ""
"Pour les entiers, il existe une sélection uniforme à partir d'une plage. "
"Pour les séquences, il existe une sélection uniforme d'un élément aléatoire, "
"une fonction pour générer une permutation aléatoire d'une liste sur place et "
"une fonction pour un échantillonnage aléatoire sans remplacement."

#: ../Doc/library/random.rst:19
msgid ""
"On the real line, there are functions to compute uniform, normal (Gaussian), "
"lognormal, negative exponential, gamma, and beta distributions. For "
"generating distributions of angles, the von Mises distribution is available."
msgstr ""
"Pour l'ensemble des réels, il y a des fonctions pour calculer des "
"distributions uniformes, normales (gaussiennes), log-normales, "
"exponentielles négatives, gamma et bêta. Pour générer des distributions "
"d'angles, la distribution de *von Mises* est disponible."

#: ../Doc/library/random.rst:23
msgid ""
"Almost all module functions depend on the basic function :func:`.random`, "
"which generates a random float uniformly in the semi-open range [0.0, 1.0).  "
"Python uses the Mersenne Twister as the core generator.  It produces 53-bit "
"precision floats and has a period of 2\\*\\*19937-1.  The underlying "
"implementation in C is both fast and threadsafe.  The Mersenne Twister is "
"one of the most extensively tested random number generators in existence.  "
"However, being completely deterministic, it is not suitable for all "
"purposes, and is completely unsuitable for cryptographic purposes."
msgstr ""
"Presque toutes les fonctions du module dépendent de la fonction de base :"
"func:`.random`, qui génère un nombre à virgule flottante aléatoire de façon "
"uniforme dans la plage semi-ouverte [0.0, 1.0). Python utilise l'algorithme "
"*Mersenne Twister* comme générateur de base. Il produit des flottants de "
"précision de 53 bits et a une période de 2\\*\\*\\*19937-1. L'implémentation "
"sous-jacente en C est à la fois rapide et  compatible avec les programmes "
"ayant de multiples fils d'exécution. Le *Mersenne Twister* est l'un des "
"générateurs de nombres aléatoires les plus largement testés qui existent. "
"Cependant, étant complètement déterministe, il n'est pas adapté à tous les "
"usages et est totalement inadapté à des fins cryptographiques."

#: ../Doc/library/random.rst:32
msgid ""
"The functions supplied by this module are actually bound methods of a hidden "
"instance of the :class:`random.Random` class.  You can instantiate your own "
"instances of :class:`Random` to get generators that don't share state."
msgstr ""
"Les fonctions fournies par ce module dépendent en réalité de méthodes d’une "
"instance cachée de la classe :class:`random.Random`. Vous pouvez créer vos "
"propres instances de :class:`Random` pour obtenir des générateurs sans états "
"partagés."

#: ../Doc/library/random.rst:36
msgid ""
"Class :class:`Random` can also be subclassed if you want to use a different "
"basic generator of your own devising: in that case, override the :meth:"
"`~Random.random`, :meth:`~Random.seed`, :meth:`~Random.getstate`, and :meth:"
"`~Random.setstate` methods. Optionally, a new generator can supply a :meth:"
"`~Random.getrandbits` method --- this allows :meth:`randrange` to produce "
"selections over an arbitrarily large range."
msgstr ""
"La classe :class:`Random` peut également être sous-classée si vous voulez "
"utiliser un générateur de base différent, de votre propre conception. Dans "
"ce cas, remplacez les méthodes :meth:`~Random.random`, :meth:`~Random."
"seed`, :meth:`~Random.gettsate` et :meth:`~Random.setstate`. En option, un "
"nouveau générateur peut fournir une méthode :meth:`~Random.getrandbits` --- "
"ce qui permet à :meth:`randrange` de produire des sélections sur une plage "
"de taille arbitraire."

#: ../Doc/library/random.rst:42
msgid ""
"The :mod:`random` module also provides the :class:`SystemRandom` class which "
"uses the system function :func:`os.urandom` to generate random numbers from "
"sources provided by the operating system."
msgstr ""
"Le module :mod:`random` fournit également la classe :class:`SystemRandom` "
"qui utilise la fonction système :func:`os.urandom` pour générer des nombres "
"aléatoires à partir de sources fournies par le système d'exploitation."

#: ../Doc/library/random.rst:48
msgid ""
"The pseudo-random generators of this module should not be used for security "
"purposes."
msgstr ""

#: ../Doc/library/random.rst:52
msgid "Bookkeeping functions:"
msgstr ""

#: ../Doc/library/random.rst:56
msgid "Initialize the random number generator."
msgstr "Initialise le générateur de nombres aléatoires."

#: ../Doc/library/random.rst:58
msgid ""
"If *a* is omitted or ``None``, the current system time is used.  If "
"randomness sources are provided by the operating system, they are used "
"instead of the system time (see the :func:`os.urandom` function for details "
"on availability)."
msgstr ""
"Si *a* est omis ou ``None``, l'heure système actuelle est utilisée.  Si des "
"sources aléatoires sont fournies par le système d'exploitation, elles sont "
"utilisées à la place de l'heure système (voir la fonction :func:`os.urandom` "
"pour les détails sur la disponibilité)."

#: ../Doc/library/random.rst:63
msgid "If *a* is an int, it is used directly."
msgstr "Si *a* est un entier, il est utilisé directement."

#: ../Doc/library/random.rst:65
msgid ""
"With version 2 (the default), a :class:`str`, :class:`bytes`, or :class:"
"`bytearray` object gets converted to an :class:`int` and all of its bits are "
"used."
msgstr ""
"Avec la version 2 (par défaut), un objet :class:`str`, :class:`bytes` ou :"
"class:`bytearray` est converti en :class:`int` et tous ses bits sont "
"utilisés."

#: ../Doc/library/random.rst:68
msgid ""
"With version 1 (provided for reproducing random sequences from older "
"versions of Python), the algorithm for :class:`str` and :class:`bytes` "
"generates a narrower range of seeds."
msgstr ""
"Avec la version 1 (fournie pour reproduire des séquences aléatoires "
"produites par d'anciennes versions de Python), l'algorithme pour :class:"
"`str` et :class:`bytes` génère une gamme plus étroite de graines."

#: ../Doc/library/random.rst:72
msgid ""
"Moved to the version 2 scheme which uses all of the bits in a string seed."
msgstr ""
"Passée à la version 2 du schéma qui utilise tous les bits d'une graine de "
"chaîne de caractères."

#: ../Doc/library/random.rst:77
msgid ""
"Return an object capturing the current internal state of the generator.  "
"This object can be passed to :func:`setstate` to restore the state."
msgstr ""
"Renvoie un objet capturant l'état interne actuel du générateur. Cet objet "
"peut être passé à :func:`setstate` pour restaurer cet état."

#: ../Doc/library/random.rst:83
msgid ""
"*state* should have been obtained from a previous call to :func:`getstate`, "
"and :func:`setstate` restores the internal state of the generator to what it "
"was at the time :func:`getstate` was called."
msgstr ""
"Il convient que *state* ait été obtenu à partir d'un appel précédent à :func:"
"`getstate`, et :func:`setstate` restaure l'état interne du générateur à ce "
"qu'il était au moment où :func:`getstate` a été appelé."

#: ../Doc/library/random.rst:90
msgid ""
"Returns a Python integer with *k* random bits. This method is supplied with "
"the MersenneTwister generator and some other generators may also provide it "
"as an optional part of the API. When available, :meth:`getrandbits` enables :"
"meth:`randrange` to handle arbitrarily large ranges."
msgstr ""

#: ../Doc/library/random.rst:96
msgid "Functions for integers:"
msgstr ""

#: ../Doc/library/random.rst:101
msgid ""
"Return a randomly selected element from ``range(start, stop, step)``.  This "
"is equivalent to ``choice(range(start, stop, step))``, but doesn't actually "
"build a range object."
msgstr ""
"Renvoie un élément sélectionné aléatoirement à partir de ``range(start, "
"stop, step)``.  C'est équivalent à ``choice(range(start, stop, step))``, "
"mais ne construit pas réellement un objet range."

#: ../Doc/library/random.rst:105
msgid ""
"The positional argument pattern matches that of :func:`range`.  Keyword "
"arguments should not be used because the function may use them in unexpected "
"ways."
msgstr ""
"Le motif d'argument positionnel correspond à celui de :func:`range`. "
"N'utilisez pas d'arguments nommés parce que la fonction peut les utiliser de "
"manière inattendue."

#: ../Doc/library/random.rst:108
msgid ""
":meth:`randrange` is more sophisticated about producing equally distributed "
"values.  Formerly it used a style like ``int(random()*n)`` which could "
"produce slightly uneven distributions."
msgstr ""
":meth:`randrange` est plus sophistiquée dans la production de valeurs "
"uniformément distribuées.  Auparavant, elle utilisait un style comme "
"``int(random()*n)`` qui pouvait produire des distributions légèrement "
"inégales."

#: ../Doc/library/random.rst:115
msgid ""
"Return a random integer *N* such that ``a <= N <= b``.  Alias for "
"``randrange(a, b+1)``."
msgstr ""
"Renvoie un entier aléatoire *N* tel que ``a <= N <= b``.  Alias pour "
"``randrange(a, b+1)``."

#: ../Doc/library/random.rst:119
msgid "Functions for sequences:"
msgstr ""

#: ../Doc/library/random.rst:123
msgid ""
"Return a random element from the non-empty sequence *seq*. If *seq* is "
"empty, raises :exc:`IndexError`."
msgstr ""
"Renvoie un élément aléatoire de la séquence non vide *seq*. Si *seq* est "
"vide, lève :exc:`IndexError`."

#: ../Doc/library/random.rst:129
msgid ""
"Shuffle the sequence *x* in place. The optional argument *random* is a 0-"
"argument function returning a random float in [0.0, 1.0); by default, this "
"is the function :func:`.random`."
msgstr ""

#: ../Doc/library/random.rst:133
msgid ""
"Note that for even rather small ``len(x)``, the total number of permutations "
"of *x* is larger than the period of most random number generators; this "
"implies that most permutations of a long sequence can never be generated."
msgstr ""

#: ../Doc/library/random.rst:140
msgid ""
"Return a *k* length list of unique elements chosen from the population "
"sequence or set. Used for random sampling without replacement."
msgstr ""
"Renvoie une liste de *k* éléments uniques choisis dans la séquence ou "
"l'ensemble de la population. Utilisé pour un tirage aléatoire sans remise."

#: ../Doc/library/random.rst:143
msgid ""
"Returns a new list containing elements from the population while leaving the "
"original population unchanged.  The resulting list is in selection order so "
"that all sub-slices will also be valid random samples.  This allows raffle "
"winners (the sample) to be partitioned into grand prize and second place "
"winners (the subslices)."
msgstr ""
"Renvoie une nouvelle liste contenant des éléments de la population tout en "
"laissant la population originale inchangée.  La liste résultante est classée "
"par ordre de sélection de sorte que toutes les sous-tranches soient "
"également des échantillons aléatoires valides.  Cela permet aux gagnants du "
"tirage (l'échantillon) d'être divisés en gagnants du grand prix et en "
"gagnants de la deuxième place (les sous-tranches)."

#: ../Doc/library/random.rst:149
msgid ""
"Members of the population need not be :term:`hashable` or unique.  If the "
"population contains repeats, then each occurrence is a possible selection in "
"the sample."
msgstr ""
"Les membres de la population n'ont pas besoin d'être :term:"
"`hachables<hashable>` ou uniques. Si la population contient des répétitions, "
"alors chaque occurrence est un tirage possible dans l'échantillon."

#: ../Doc/library/random.rst:152
msgid ""
"To choose a sample from a range of integers, use an :func:`range` object as "
"an argument.  This is especially fast and space efficient for sampling from "
"a large population:  ``sample(range(10000000), 60)``."
msgstr ""

#: ../Doc/library/random.rst:156
msgid ""
"If the sample size is larger than the population size, a :exc:`ValueError` "
"is raised."
msgstr ""
"Si la taille de l'échantillon est supérieure à la taille de la population, "
"une :exc:`ValueError` est levée."

#: ../Doc/library/random.rst:159
msgid ""
"The following functions generate specific real-valued distributions. "
"Function parameters are named after the corresponding variables in the "
"distribution's equation, as used in common mathematical practice; most of "
"these equations can be found in any statistics text."
msgstr ""
"Les fonctions suivantes génèrent des distributions spécifiques en nombre "
"réels. Les paramètres de fonction sont nommés d'après les variables "
"correspondantes de l'équation de la distribution, telles qu'elles sont "
"utilisées dans la pratique mathématique courante ; la plupart de ces "
"équations peuvent être trouvées dans tout document traitant de statistiques."

#: ../Doc/library/random.rst:167
msgid "Return the next random floating point number in the range [0.0, 1.0)."
msgstr ""
"Renvoie le nombre aléatoire à virgule flottante suivant dans la plage [0.0, "
"1.0)."

#: ../Doc/library/random.rst:172
msgid ""
"Return a random floating point number *N* such that ``a <= N <= b`` for ``a "
"<= b`` and ``b <= N <= a`` for ``b < a``."
msgstr ""
"Renvoie un nombre aléatoire à virgule flottante *N* tel que ``a <= N <= b`` "
"pour ``a <= b`` et ``b <= N <= a`` pour ``b < a``."

#: ../Doc/library/random.rst:175
msgid ""
"The end-point value ``b`` may or may not be included in the range depending "
"on floating-point rounding in the equation ``a + (b-a) * random()``."
msgstr ""
"La valeur finale ``b`` peut ou non être incluse dans la plage selon "
"l'arrondi à virgule flottante dans l'équation ``a + (b-a) * random()``."

#: ../Doc/library/random.rst:181
msgid ""
"Return a random floating point number *N* such that ``low <= N <= high`` and "
"with the specified *mode* between those bounds.  The *low* and *high* bounds "
"default to zero and one.  The *mode* argument defaults to the midpoint "
"between the bounds, giving a symmetric distribution."
msgstr ""
"Renvoie un nombre aléatoire en virgule flottante *N* tel que ``low <= N <= "
"high`` et avec le *mode* spécifié entre ces bornes.  Les limites *low* et "
"*high* par défaut sont zéro et un.  L'argument *mode* est par défaut le "
"point médian entre les bornes, ce qui donne une distribution symétrique."

#: ../Doc/library/random.rst:189
msgid ""
"Beta distribution.  Conditions on the parameters are ``alpha > 0`` and "
"``beta > 0``. Returned values range between 0 and 1."
msgstr ""
"Distribution bêta.  Les conditions sur les paramètres sont ``alpha > 0`` et "
"``beta > 0``. Les valeurs renvoyées varient entre 0 et 1."

#: ../Doc/library/random.rst:195
msgid ""
"Exponential distribution.  *lambd* is 1.0 divided by the desired mean.  It "
"should be nonzero.  (The parameter would be called \"lambda\", but that is a "
"reserved word in Python.)  Returned values range from 0 to positive infinity "
"if *lambd* is positive, and from negative infinity to 0 if *lambd* is "
"negative."
msgstr ""
"Distribution exponentielle.  *lambd* est 1,0 divisé par la moyenne désirée.  "
"Ce ne doit pas être zéro.  (Le paramètre aurait dû s'appeler \"lambda\", "
"mais c'est un mot réservé en Python.)  Les valeurs renvoyées vont de 0 à "
"plus l'infini positif si *lambd* est positif, et de moins l'infini à 0 si "
"*lambd* est négatif."

#: ../Doc/library/random.rst:204
msgid ""
"Gamma distribution.  (*Not* the gamma function!)  Conditions on the "
"parameters are ``alpha > 0`` and ``beta > 0``."
msgstr ""
"Distribution gamma.  (*Ce n'est pas* la fonction gamma !) Les conditions sur "
"les paramètres sont ``alpha > 0`` et ``beta > 0``."

#: ../Doc/library/random.rst:207
msgid "The probability distribution function is::"
msgstr "La fonction de distribution de probabilité est ::"

#: ../Doc/library/random.rst:216
msgid ""
"Gaussian distribution.  *mu* is the mean, and *sigma* is the standard "
"deviation.  This is slightly faster than the :func:`normalvariate` function "
"defined below."
msgstr ""
"Distribution gaussienne.  *mu* est la moyenne et *sigma* est la écart type.  "
"C'est légèrement plus rapide que la fonction :func:`normalvariate` définie "
"ci-dessous."

#: ../Doc/library/random.rst:223
msgid ""
"Log normal distribution.  If you take the natural logarithm of this "
"distribution, you'll get a normal distribution with mean *mu* and standard "
"deviation *sigma*.  *mu* can have any value, and *sigma* must be greater "
"than zero."
msgstr ""
"Logarithme de la distribution normale.  Si vous prenez le logarithme naturel "
"de cette distribution, vous obtiendrez une distribution normale avec *mu* "
"moyen et écart-type *sigma*.  *mu* peut avoir n'importe quelle valeur et "
"*sigma* doit être supérieur à zéro."

#: ../Doc/library/random.rst:231
msgid ""
"Normal distribution.  *mu* is the mean, and *sigma* is the standard "
"deviation."
msgstr ""
"Distribution normale.  *mu* est la moyenne et *sigma* est l'écart type."

#: ../Doc/library/random.rst:236
msgid ""
"*mu* is the mean angle, expressed in radians between 0 and 2\\*\\ *pi*, and "
"*kappa* is the concentration parameter, which must be greater than or equal "
"to zero.  If *kappa* is equal to zero, this distribution reduces to a "
"uniform random angle over the range 0 to 2\\*\\ *pi*."
msgstr ""
"*mu* est l'angle moyen, exprimé en radians entre 0 et 2\\*\\ *pi*, et "
"*kappa* est le paramètre de concentration, qui doit être supérieur ou égal à "
"zéro.  Si *kappa* est égal à zéro, cette distribution se réduit à un angle "
"aléatoire uniforme sur la plage de 0 à 2\\*\\ *pi*."

#: ../Doc/library/random.rst:244
msgid "Pareto distribution.  *alpha* is the shape parameter."
msgstr "Distribution de Pareto.  *alpha* est le paramètre de forme."

#: ../Doc/library/random.rst:249
msgid ""
"Weibull distribution.  *alpha* is the scale parameter and *beta* is the "
"shape parameter."
msgstr ""
"Distribution de Weibull.  *alpha* est le paramètre de l'échelle et *beta* "
"est le paramètre de forme."

#: ../Doc/library/random.rst:253
msgid "Alternative Generator:"
msgstr ""

#: ../Doc/library/random.rst:257
msgid ""
"Class that uses the :func:`os.urandom` function for generating random "
"numbers from sources provided by the operating system. Not available on all "
"systems. Does not rely on software state, and sequences are not "
"reproducible. Accordingly, the :meth:`seed` method has no effect and is "
"ignored. The :meth:`getstate` and :meth:`setstate` methods raise :exc:"
"`NotImplementedError` if called."
msgstr ""
"Classe qui utilise la fonction :func:`os.urandom` pour générer des nombres "
"aléatoires à partir de sources fournies par le système d'exploitation. Non "
"disponible sur tous les systèmes. Ne repose pas sur un état purement "
"logiciel et les séquences ne sont pas reproductibles. Par conséquent, la "
"méthode :meth:`seed` n'a aucun effet et est ignorée. Les méthodes :meth:"
"`getstate` et :meth:`setstate` lèvent :exc:`NotImplementedError` si vous les "
"appelez."

#: ../Doc/library/random.rst:267
msgid ""
"M. Matsumoto and T. Nishimura, \"Mersenne Twister: A 623-dimensionally "
"equidistributed uniform pseudorandom number generator\", ACM Transactions on "
"Modeling and Computer Simulation Vol. 8, No. 1, January pp.3-30 1998."
msgstr ""

#: ../Doc/library/random.rst:272
msgid ""
"`Complementary-Multiply-with-Carry recipe <https://code.activestate.com/"
"recipes/576707/>`_ for a compatible alternative random number generator with "
"a long period and comparatively simple update operations."
msgstr ""
"`Complementary-Multiply-with-Carry recipe <https://code.activestate.com/"
"recipes/576707/>`_ pour un autre générateur de nombres aléatoires avec une "
"longue période et des opérations de mise à jour relativement simples."

#: ../Doc/library/random.rst:279
msgid "Notes on Reproducibility"
msgstr "Remarques sur la reproductibilité"

#: ../Doc/library/random.rst:281
msgid ""
"Sometimes it is useful to be able to reproduce the sequences given by a "
"pseudo random number generator.  By re-using a seed value, the same sequence "
"should be reproducible from run to run as long as multiple threads are not "
"running."
msgstr ""

#: ../Doc/library/random.rst:285
msgid ""
"Most of the random module's algorithms and seeding functions are subject to "
"change across Python versions, but two aspects are guaranteed not to change:"
msgstr ""
"La plupart des algorithmes et des fonctions de génération de graine du "
"module aléatoire sont susceptibles d'être modifiés d'une version à l'autre "
"de Python, mais deux aspects sont garantis de ne pas changer ::"

#: ../Doc/library/random.rst:288
msgid ""
"If a new seeding method is added, then a backward compatible seeder will be "
"offered."
msgstr ""
"Si une nouvelle méthode de génération de graine est ajoutée, une fonction "
"rétro-compatible sera offerte."

#: ../Doc/library/random.rst:291
msgid ""
"The generator's :meth:`~Random.random` method will continue to produce the "
"same sequence when the compatible seeder is given the same seed."
msgstr ""
"La méthode :meth:`~Random.random` du générateur continuera à produire la "
"même séquence lorsque la fonction de génération de graine compatible recevra "
"la même semence."

#: ../Doc/library/random.rst:297
msgid "Examples and Recipes"
msgstr "Exemples et Recettes"

#: ../Doc/library/random.rst:299
msgid "Basic usage::"
msgstr "Utilisation basique : ::"

#: ../Doc/library/random.rst:324
msgid ""
"A common task is to make a :func:`random.choice` with weighted probabilities."
msgstr ""

#: ../Doc/library/random.rst:326
msgid ""
"If the weights are small integer ratios, a simple technique is to build a "
"sample population with repeats::"
msgstr ""

#: ../Doc/library/random.rst:337
msgid ""
"A more general approach is to arrange the weights in a cumulative "
"distribution with :func:`itertools.accumulate`, and then locate the random "
"value with :func:`bisect.bisect`::"
msgstr ""
