# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2016, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-10-30 10:44+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../Doc/library/random.rst:2
msgid ":mod:`random` --- Generate pseudo-random numbers"
msgstr ":mod:`random` --- Génère des nombres pseudo-aléatoires"

#: ../Doc/library/random.rst:7
msgid "**Source code:** :source:`Lib/random.py`"
msgstr "**Code source :** :source:`Lib/random.py`"

#: ../Doc/library/random.rst:11
msgid ""
"This module implements pseudo-random number generators for various "
"distributions."
msgstr ""
"Ce module implémente des générateurs de nombres pseudo-aléatoires pour "
"différentes distributions."

#: ../Doc/library/random.rst:14
msgid ""
"For integers, uniform selection from a range. For sequences, uniform "
"selection of a random element, a function to generate a random permutation "
"of a list in-place, and a function for random sampling without replacement."
msgstr ""

#: ../Doc/library/random.rst:18
msgid ""
"On the real line, there are functions to compute uniform, normal (Gaussian), "
"lognormal, negative exponential, gamma, and beta distributions. For "
"generating distributions of angles, the von Mises distribution is available."
msgstr ""
"Pour l'ensemble des réels, il y a des fonctions pour calculer des "
"distributions uniformes, normales (gaussiennes), log-normales, "
"exponentielles négatives, gamma et bêta. Pour générer des distributions "
"d'angles, la distribution de *von Mises* est disponible."

#: ../Doc/library/random.rst:22
msgid ""
"Almost all module functions depend on the basic function :func:`.random`, "
"which generates a random float uniformly in the semi-open range [0.0, 1.0).  "
"Python uses the Mersenne Twister as the core generator.  It produces 53-bit "
"precision floats and has a period of 2\\*\\*19937-1.  The underlying "
"implementation in C is both fast and threadsafe.  The Mersenne Twister is "
"one of the most extensively tested random number generators in existence.  "
"However, being completely deterministic, it is not suitable for all "
"purposes, and is completely unsuitable for cryptographic purposes."
msgstr ""
"Presque toutes les fonctions du module dépendent de la fonction de base :"
"func:`.random`, qui génère un nombre à virgule flottante aléatoire de façon "
"uniforme dans la plage semi-ouverte [0.0, 1.0). Python utilise l'algorithme "
"*Mersenne Twister* comme générateur de base. Il produit des flottants de "
"précision de 53 bits et a une période de 2\\*\\*\\*19937-1. L'implémentation "
"sous-jacente en C est à la fois rapide et  compatible avec les programmes "
"ayant de multiples fils d'exécution. Le *Mersenne Twister* est l'un des "
"générateurs de nombres aléatoires les plus largement testés qui existent. "
"Cependant, étant complètement déterministe, il n'est pas adapté à tous les "
"usages et est totalement inadapté à des fins cryptographiques."

#: ../Doc/library/random.rst:31
msgid ""
"The functions supplied by this module are actually bound methods of a hidden "
"instance of the :class:`random.Random` class.  You can instantiate your own "
"instances of :class:`Random` to get generators that don't share state.  This "
"is especially useful for multi-threaded programs, creating a different "
"instance of :class:`Random` for each thread, and using the :meth:`jumpahead` "
"method to make it likely that the generated sequences seen by each thread "
"don't overlap."
msgstr ""

#: ../Doc/library/random.rst:38
msgid ""
"Class :class:`Random` can also be subclassed if you want to use a different "
"basic generator of your own devising: in that case, override the :meth:"
"`~Random.random`, :meth:`~Random.seed`, :meth:`~Random.getstate`, :meth:"
"`~Random.setstate` and :meth:`~Random.jumpahead` methods.  Optionally, a new "
"generator can supply a :meth:`~Random.getrandbits` method --- this allows :"
"meth:`randrange` to produce selections over an arbitrarily large range."
msgstr ""

#: ../Doc/library/random.rst:45
msgid "the :meth:`getrandbits` method."
msgstr ""

#: ../Doc/library/random.rst:48
msgid ""
"As an example of subclassing, the :mod:`random` module provides the :class:"
"`WichmannHill` class that implements an alternative generator in pure "
"Python.  The class provides a backward compatible way to reproduce results "
"from earlier versions of Python, which used the Wichmann-Hill algorithm as "
"the core generator.  Note that this Wichmann-Hill generator can no longer be "
"recommended: its period is too short by contemporary standards, and the "
"sequence generated is known to fail some stringent randomness tests.  See "
"the references below for a recent variant that repairs these flaws."
msgstr ""

#: ../Doc/library/random.rst:57
msgid "MersenneTwister replaced Wichmann-Hill as the default generator."
msgstr ""

#: ../Doc/library/random.rst:60
msgid ""
"The :mod:`random` module also provides the :class:`SystemRandom` class which "
"uses the system function :func:`os.urandom` to generate random numbers from "
"sources provided by the operating system."
msgstr ""
"Le module :mod:`random` fournit également la classe :class:`SystemRandom` "
"qui utilise la fonction système :func:`os.urandom` pour générer des nombres "
"aléatoires à partir de sources fournies par le système d'exploitation."

#: ../Doc/library/random.rst:66
msgid ""
"The pseudo-random generators of this module should not be used for security "
"purposes.  Use :func:`os.urandom` or :class:`SystemRandom` if you require a "
"cryptographically secure pseudo-random number generator."
msgstr ""

#: ../Doc/library/random.rst:71
msgid "Bookkeeping functions:"
msgstr ""

#: ../Doc/library/random.rst:76
msgid ""
"Initialize the basic random number generator. Optional argument *x* can be "
"any :term:`hashable` object. If *x* is omitted or ``None``, current system "
"time is used; current system time is also used to initialize the generator "
"when the module is first imported.  If randomness sources are provided by "
"the operating system, they are used instead of the system time (see the :"
"func:`os.urandom` function for details on availability)."
msgstr ""

#: ../Doc/library/random.rst:83
msgid ""
"If a :term:`hashable` object is given, deterministic results are only "
"assured when :envvar:`PYTHONHASHSEED` is disabled."
msgstr ""

#: ../Doc/library/random.rst:86
msgid "formerly, operating system resources were not used."
msgstr ""

#: ../Doc/library/random.rst:91
msgid ""
"Return an object capturing the current internal state of the generator.  "
"This object can be passed to :func:`setstate` to restore the state."
msgstr ""
"Renvoie un objet capturant l'état interne actuel du générateur. Cet objet "
"peut être passé à :func:`setstate` pour restaurer cet état."

#: ../Doc/library/random.rst:96
msgid ""
"State values produced in Python 2.6 cannot be loaded into earlier versions."
msgstr ""

#: ../Doc/library/random.rst:102
msgid ""
"*state* should have been obtained from a previous call to :func:`getstate`, "
"and :func:`setstate` restores the internal state of the generator to what it "
"was at the time :func:`getstate` was called."
msgstr ""
"Il convient que *state* ait été obtenu à partir d'un appel précédent à :func:"
"`getstate`, et :func:`setstate` restaure l'état interne du générateur à ce "
"qu'il était au moment où :func:`getstate` a été appelé."

#: ../Doc/library/random.rst:111
msgid ""
"Change the internal state to one different from and likely far away from the "
"current state.  *n* is a non-negative integer which is used to scramble the "
"current state vector.  This is most useful in multi-threaded programs, in "
"conjunction with multiple instances of the :class:`Random` class: :meth:"
"`setstate` or :meth:`seed` can be used to force all instances into the same "
"internal state, and then :meth:`jumpahead` can be used to force the "
"instances' states far apart."
msgstr ""

#: ../Doc/library/random.rst:121
msgid ""
"Instead of jumping to a specific state, *n* steps ahead, ``jumpahead(n)`` "
"jumps to another state likely to be separated by many steps."
msgstr ""

#: ../Doc/library/random.rst:128
msgid ""
"Returns a python :class:`long` int with *k* random bits. This method is "
"supplied with the MersenneTwister generator and some other generators may "
"also provide it as an optional part of the API. When available, :meth:"
"`getrandbits` enables :meth:`randrange` to handle arbitrarily large ranges."
msgstr ""

#: ../Doc/library/random.rst:135
msgid "Functions for integers:"
msgstr ""

#: ../Doc/library/random.rst:141
msgid ""
"Return a randomly selected element from ``range(start, stop, step)``.  This "
"is equivalent to ``choice(range(start, stop, step))``, but doesn't actually "
"build a range object."
msgstr ""
"Renvoie un élément sélectionné aléatoirement à partir de ``range(start, "
"stop, step)``.  C'est équivalent à ``choice(range(start, stop, step))``, "
"mais ne construit pas réellement un objet range."

#: ../Doc/library/random.rst:150
msgid "Return a random integer *N* such that ``a <= N <= b``."
msgstr ""

#: ../Doc/library/random.rst:152
msgid "Functions for sequences:"
msgstr ""

#: ../Doc/library/random.rst:157
msgid ""
"Return a random element from the non-empty sequence *seq*. If *seq* is "
"empty, raises :exc:`IndexError`."
msgstr ""
"Renvoie un élément aléatoire de la séquence non vide *seq*. Si *seq* est "
"vide, lève :exc:`IndexError`."

#: ../Doc/library/random.rst:163
msgid ""
"Shuffle the sequence *x* in place. The optional argument *random* is a 0-"
"argument function returning a random float in [0.0, 1.0); by default, this "
"is the function :func:`.random`."
msgstr ""

#: ../Doc/library/random.rst:167
msgid ""
"Note that for even rather small ``len(x)``, the total number of permutations "
"of *x* is larger than the period of most random number generators; this "
"implies that most permutations of a long sequence can never be generated."
msgstr ""

#: ../Doc/library/random.rst:174
msgid ""
"Return a *k* length list of unique elements chosen from the population "
"sequence. Used for random sampling without replacement."
msgstr ""

#: ../Doc/library/random.rst:179
msgid ""
"Returns a new list containing elements from the population while leaving the "
"original population unchanged.  The resulting list is in selection order so "
"that all sub-slices will also be valid random samples.  This allows raffle "
"winners (the sample) to be partitioned into grand prize and second place "
"winners (the subslices)."
msgstr ""
"Renvoie une nouvelle liste contenant des éléments de la population tout en "
"laissant la population originale inchangée.  La liste résultante est classée "
"par ordre de sélection de sorte que toutes les sous-tranches soient "
"également des échantillons aléatoires valides.  Cela permet aux gagnants du "
"tirage (l'échantillon) d'être divisés en gagnants du grand prix et en "
"gagnants de la deuxième place (les sous-tranches)."

#: ../Doc/library/random.rst:185
msgid ""
"Members of the population need not be :term:`hashable` or unique.  If the "
"population contains repeats, then each occurrence is a possible selection in "
"the sample."
msgstr ""
"Les membres de la population n'ont pas besoin d'être :term:"
"`hachables<hashable>` ou uniques. Si la population contient des répétitions, "
"alors chaque occurrence est un tirage possible dans l'échantillon."

#: ../Doc/library/random.rst:188
msgid ""
"To choose a sample from a range of integers, use an :func:`xrange` object as "
"an argument.  This is especially fast and space efficient for sampling from "
"a large population:  ``sample(xrange(10000000), 60)``."
msgstr ""

#: ../Doc/library/random.rst:192
msgid ""
"The following functions generate specific real-valued distributions. "
"Function parameters are named after the corresponding variables in the "
"distribution's equation, as used in common mathematical practice; most of "
"these equations can be found in any statistics text."
msgstr ""
"Les fonctions suivantes génèrent des distributions spécifiques en nombre "
"réels. Les paramètres de fonction sont nommés d'après les variables "
"correspondantes de l'équation de la distribution, telles qu'elles sont "
"utilisées dans la pratique mathématique courante ; la plupart de ces "
"équations peuvent être trouvées dans tout document traitant de statistiques."

#: ../Doc/library/random.rst:200
msgid "Return the next random floating point number in the range [0.0, 1.0)."
msgstr ""
"Renvoie le nombre aléatoire à virgule flottante suivant dans la plage [0.0, "
"1.0)."

#: ../Doc/library/random.rst:205
msgid ""
"Return a random floating point number *N* such that ``a <= N <= b`` for ``a "
"<= b`` and ``b <= N <= a`` for ``b < a``."
msgstr ""
"Renvoie un nombre aléatoire à virgule flottante *N* tel que ``a <= N <= b`` "
"pour ``a <= b`` et ``b <= N <= a`` pour ``b < a``."

#: ../Doc/library/random.rst:208
msgid ""
"The end-point value ``b`` may or may not be included in the range depending "
"on floating-point rounding in the equation ``a + (b-a) * random()``."
msgstr ""
"La valeur finale ``b`` peut ou non être incluse dans la plage selon "
"l'arrondi à virgule flottante dans l'équation ``a + (b-a) * random()``."

#: ../Doc/library/random.rst:214
msgid ""
"Return a random floating point number *N* such that ``low <= N <= high`` and "
"with the specified *mode* between those bounds.  The *low* and *high* bounds "
"default to zero and one.  The *mode* argument defaults to the midpoint "
"between the bounds, giving a symmetric distribution."
msgstr ""
"Renvoie un nombre aléatoire en virgule flottante *N* tel que ``low <= N <= "
"high`` et avec le *mode* spécifié entre ces bornes.  Les limites *low* et "
"*high* par défaut sont zéro et un.  L'argument *mode* est par défaut le "
"point médian entre les bornes, ce qui donne une distribution symétrique."

#: ../Doc/library/random.rst:224
msgid ""
"Beta distribution.  Conditions on the parameters are ``alpha > 0`` and "
"``beta > 0``. Returned values range between 0 and 1."
msgstr ""
"Distribution bêta.  Les conditions sur les paramètres sont ``alpha > 0`` et "
"``beta > 0``. Les valeurs renvoyées varient entre 0 et 1."

#: ../Doc/library/random.rst:230
msgid ""
"Exponential distribution.  *lambd* is 1.0 divided by the desired mean.  It "
"should be nonzero.  (The parameter would be called \"lambda\", but that is a "
"reserved word in Python.)  Returned values range from 0 to positive infinity "
"if *lambd* is positive, and from negative infinity to 0 if *lambd* is "
"negative."
msgstr ""
"Distribution exponentielle.  *lambd* est 1,0 divisé par la moyenne désirée.  "
"Ce ne doit pas être zéro.  (Le paramètre aurait dû s'appeler \"lambda\", "
"mais c'est un mot réservé en Python.)  Les valeurs renvoyées vont de 0 à "
"plus l'infini positif si *lambd* est positif, et de moins l'infini à 0 si "
"*lambd* est négatif."

#: ../Doc/library/random.rst:239
msgid ""
"Gamma distribution.  (*Not* the gamma function!)  Conditions on the "
"parameters are ``alpha > 0`` and ``beta > 0``."
msgstr ""
"Distribution gamma.  (*Ce n'est pas* la fonction gamma !) Les conditions sur "
"les paramètres sont ``alpha > 0`` et ``beta > 0``."

#: ../Doc/library/random.rst:242
msgid "The probability distribution function is::"
msgstr "La fonction de distribution de probabilité est ::"

#: ../Doc/library/random.rst:251
msgid ""
"Gaussian distribution.  *mu* is the mean, and *sigma* is the standard "
"deviation.  This is slightly faster than the :func:`normalvariate` function "
"defined below."
msgstr ""
"Distribution gaussienne.  *mu* est la moyenne et *sigma* est la écart type.  "
"C'est légèrement plus rapide que la fonction :func:`normalvariate` définie "
"ci-dessous."

#: ../Doc/library/random.rst:258
msgid ""
"Log normal distribution.  If you take the natural logarithm of this "
"distribution, you'll get a normal distribution with mean *mu* and standard "
"deviation *sigma*.  *mu* can have any value, and *sigma* must be greater "
"than zero."
msgstr ""
"Logarithme de la distribution normale.  Si vous prenez le logarithme naturel "
"de cette distribution, vous obtiendrez une distribution normale avec *mu* "
"moyen et écart-type *sigma*.  *mu* peut avoir n'importe quelle valeur et "
"*sigma* doit être supérieur à zéro."

#: ../Doc/library/random.rst:266
msgid ""
"Normal distribution.  *mu* is the mean, and *sigma* is the standard "
"deviation."
msgstr ""
"Distribution normale.  *mu* est la moyenne et *sigma* est l'écart type."

#: ../Doc/library/random.rst:271
msgid ""
"*mu* is the mean angle, expressed in radians between 0 and 2\\*\\ *pi*, and "
"*kappa* is the concentration parameter, which must be greater than or equal "
"to zero.  If *kappa* is equal to zero, this distribution reduces to a "
"uniform random angle over the range 0 to 2\\*\\ *pi*."
msgstr ""
"*mu* est l'angle moyen, exprimé en radians entre 0 et 2\\*\\ *pi*, et "
"*kappa* est le paramètre de concentration, qui doit être supérieur ou égal à "
"zéro.  Si *kappa* est égal à zéro, cette distribution se réduit à un angle "
"aléatoire uniforme sur la plage de 0 à 2\\*\\ *pi*."

#: ../Doc/library/random.rst:279
msgid "Pareto distribution.  *alpha* is the shape parameter."
msgstr "Distribution de Pareto.  *alpha* est le paramètre de forme."

#: ../Doc/library/random.rst:284
msgid ""
"Weibull distribution.  *alpha* is the scale parameter and *beta* is the "
"shape parameter."
msgstr ""
"Distribution de Weibull.  *alpha* est le paramètre de l'échelle et *beta* "
"est le paramètre de forme."

#: ../Doc/library/random.rst:288
msgid "Alternative Generators:"
msgstr ""

#: ../Doc/library/random.rst:292
msgid ""
"Class that implements the Wichmann-Hill algorithm as the core generator. Has "
"all of the same methods as :class:`Random` plus the :meth:`whseed` method "
"described below.  Because this class is implemented in pure Python, it is "
"not threadsafe and may require locks between calls.  The period of the "
"generator is 6,953,607,871,644 which is small enough to require care that "
"two independent random sequences do not overlap."
msgstr ""

#: ../Doc/library/random.rst:302
msgid ""
"This is obsolete, supplied for bit-level compatibility with versions of "
"Python prior to 2.1. See :func:`seed` for details.  :func:`whseed` does not "
"guarantee that distinct integer arguments yield distinct internal states, "
"and can yield no more than about 2\\*\\*24 distinct internal states in all."
msgstr ""

#: ../Doc/library/random.rst:310
msgid ""
"Class that uses the :func:`os.urandom` function for generating random "
"numbers from sources provided by the operating system. Not available on all "
"systems. Does not rely on software state and sequences are not reproducible. "
"Accordingly, the :meth:`seed` and :meth:`jumpahead` methods have no effect "
"and are ignored. The :meth:`getstate` and :meth:`setstate` methods raise :"
"exc:`NotImplementedError` if called."
msgstr ""

#: ../Doc/library/random.rst:319
msgid "Examples of basic usage::"
msgstr ""

#: ../Doc/library/random.rst:344
msgid ""
"M. Matsumoto and T. Nishimura, \"Mersenne Twister: A 623-dimensionally "
"equidistributed uniform pseudorandom number generator\", ACM Transactions on "
"Modeling and Computer Simulation Vol. 8, No. 1, January pp.3-30 1998."
msgstr ""

#: ../Doc/library/random.rst:348
msgid ""
"Wichmann, B. A. & Hill, I. D., \"Algorithm AS 183: An efficient and portable "
"pseudo-random number generator\", Applied Statistics 31 (1982) 188-190."
msgstr ""

#: ../Doc/library/random.rst:351
msgid ""
"`Complementary-Multiply-with-Carry recipe <http://code.activestate.com/"
"recipes/576707/>`_ for a compatible alternative random number generator with "
"a long period and comparatively simple update operations."
msgstr ""
