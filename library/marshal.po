# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2016, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-10-30 10:44+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../Doc/library/marshal.rst:3
msgid ":mod:`marshal` --- Internal Python object serialization"
msgstr ":mod:`marshal` — Sérialisation interne des objets Python"

#: ../Doc/library/marshal.rst:10
msgid ""
"This module contains functions that can read and write Python values in a "
"binary format.  The format is specific to Python, but independent of machine "
"architecture issues (e.g., you can write a Python value to a file on a PC, "
"transport the file to a Sun, and read it back there).  Details of the format "
"are undocumented on purpose; it may change between Python versions (although "
"it rarely does). [#]_"
msgstr ""
"Ce module contient des fonctions permettant de lire et écrire des valeurs "
"Python au format binaire.  Ce format est propre à Python, mais indépendant "
"de l'architecture de la machine (p. ex., vous pouvez écrire une valeur "
"Python dans un fichier sur un PC, envoyer le fichier vers une machine Sun et "
"la lire à nouveau).  Les détails du format sont volontairement non "
"documentés ; il peut changer d'une version Python à l'autre (bien que ce "
"soit rarement le cas). [#]_"

#: ../Doc/library/marshal.rst:21
msgid ""
"This is not a general \"persistence\" module.  For general persistence and "
"transfer of Python objects through RPC calls, see the modules :mod:`pickle` "
"and :mod:`shelve`.  The :mod:`marshal` module exists mainly to support "
"reading and writing the \"pseudo-compiled\" code for Python modules of :file:"
"`.pyc` files. Therefore, the Python maintainers reserve the right to modify "
"the marshal format in backward incompatible ways should the need arise.  If "
"you're serializing and de-serializing Python objects, use the :mod:`pickle` "
"module instead -- the performance is comparable, version independence is "
"guaranteed, and pickle supports a substantially wider range of objects than "
"marshal."
msgstr ""
"Ce module ne permet pas de « sérialiser » des objets de manière permanente. "
"Pour des questions de sérialisation en général ou de transfert d'objets "
"Python par des appels RPC, référez-vous aux modules :mod:`pickle` et :mod:"
"`shelve`.  Le module :mod:`marshal` existe principalement pour permettre la "
"lecture et l'écriture de code « pseudo-compilé » pour les modules Python des "
"fichiers :file:`.pyc`. Par conséquent, les mainteneurs Python se réservent "
"le droit de modifier le format *marshal* en cassant la rétrocompatibilité si "
"besoin.  Si vous sérialisez et dé-sérialisez des objets Python, utilisez "
"plutôt le module :mod:`pickle` — les performances sont comparables, "
"l'indépendance par rapport à la version est garantie, et *pickle* prend en "
"charge une gamme d'objets beaucoup plus large que *marshal*."

#: ../Doc/library/marshal.rst:33
msgid ""
"The :mod:`marshal` module is not intended to be secure against erroneous or "
"maliciously constructed data.  Never unmarshal data received from an "
"untrusted or unauthenticated source."
msgstr ""
"N'utilisez pas le module :mod:`marshal` pour lire des données erronées ou "
"malveillantes.  Ne démantelez jamais des données reçues d'une source non "
"fiable ou non authentifiée."

#: ../Doc/library/marshal.rst:39
msgid ""
"Not all Python object types are supported; in general, only objects whose "
"value is independent from a particular invocation of Python can be written "
"and read by this module.  The following types are supported: booleans, "
"integers, long integers, floating point numbers, complex numbers, strings, "
"Unicode objects, tuples, lists, sets, frozensets, dictionaries, and code "
"objects, where it should be understood that tuples, lists, sets, frozensets "
"and dictionaries are only supported as long as the values contained therein "
"are themselves supported; and recursive lists, sets and dictionaries should "
"not be written (they will cause infinite loops).  The singletons :const:"
"`None`, :const:`Ellipsis` and :exc:`StopIteration` can also be marshalled "
"and unmarshalled."
msgstr ""

#: ../Doc/library/marshal.rst:52
msgid ""
"On machines where C's ``long int`` type has more than 32 bits (such as the "
"DEC Alpha), it is possible to create plain Python integers that are longer "
"than 32 bits. If such an integer is marshaled and read back in on a machine "
"where C's ``long int`` type has only 32 bits, a Python long integer object "
"is returned instead.  While of a different type, the numeric value is the "
"same.  (This behavior is new in Python 2.2.  In earlier versions, all but "
"the least-significant 32 bits of the value were lost, and a warning message "
"was printed.)"
msgstr ""

#: ../Doc/library/marshal.rst:61
msgid ""
"There are functions that read/write files as well as functions operating on "
"strings."
msgstr ""

#: ../Doc/library/marshal.rst:64
msgid "The module defines these functions:"
msgstr "Le module définit ces fonctions :"

#: ../Doc/library/marshal.rst:69
msgid ""
"Write the value on the open file.  The value must be a supported type.  The "
"file must be an open file object such as ``sys.stdout`` or returned by :func:"
"`open` or :func:`os.popen`.  It may not be a wrapper such as TemporaryFile "
"on Windows. It must be opened in binary mode (``'wb'`` or ``'w+b'``)."
msgstr ""

#: ../Doc/library/marshal.rst:75
msgid ""
"If the value has (or contains an object that has) an unsupported type, a :"
"exc:`ValueError` exception is raised --- but garbage data will also be "
"written to the file.  The object will not be properly read back by :func:"
"`load`."
msgstr ""
"Si la valeur est (ou contient un objet qui est) d'un type non implémenté, "
"une exception :exc:`ValueError` est levée — mais le contenu de la mémoire "
"sera également écrit dans le fichier.  L'objet ne sera pas correctement lu "
"par :func:`load`."

#: ../Doc/library/marshal.rst:79
msgid ""
"The *version* argument indicates the data format that ``dump`` should use "
"(see below)."
msgstr ""
"L'argument *version* indique le format de données que le ``dump`` doit "
"utiliser (voir ci-dessous)."

#: ../Doc/library/marshal.rst:86
msgid ""
"Read one value from the open file and return it.  If no valid value is read "
"(e.g. because the data has a different Python version's incompatible marshal "
"format), raise :exc:`EOFError`, :exc:`ValueError` or :exc:`TypeError`.  The "
"file must be an open file object opened in binary mode (``'rb'`` or ``'r"
"+b'``)."
msgstr ""

#: ../Doc/library/marshal.rst:94
msgid ""
"If an object containing an unsupported type was marshalled with :func:"
"`dump`, :func:`load` will substitute ``None`` for the unmarshallable type."
msgstr ""
"Si un objet contenant un type non pris en charge a été dé-compilé avec :func:"
"`dump`, :func:`load` remplacera le type non « dé-compilable » par ``None``."

#: ../Doc/library/marshal.rst:100
msgid ""
"Return the string that would be written to a file by ``dump(value, file)``.  "
"The value must be a supported type.  Raise a :exc:`ValueError` exception if "
"value has (or contains an object that has) an unsupported type."
msgstr ""

#: ../Doc/library/marshal.rst:104
msgid ""
"The *version* argument indicates the data format that ``dumps`` should use "
"(see below)."
msgstr ""
"L'argument *version* indique le format de données que ``dumps`` doivent "
"utiliser (voir ci-dessous)."

#: ../Doc/library/marshal.rst:111
msgid ""
"Convert the string to a value.  If no valid value is found, raise :exc:"
"`EOFError`, :exc:`ValueError` or :exc:`TypeError`.  Extra characters in the "
"string are ignored."
msgstr ""

#: ../Doc/library/marshal.rst:116
msgid "In addition, the following constants are defined:"
msgstr "De plus, les constantes suivantes sont définies :"

#: ../Doc/library/marshal.rst:120
msgid ""
"Indicates the format that the module uses. Version 0 is the historical "
"format, version 1 (added in Python 2.4) shares interned strings and version "
"2 (added in Python 2.5) uses a binary format for floating point numbers. The "
"current version is 2."
msgstr ""

#: ../Doc/library/marshal.rst:129
msgid "Footnotes"
msgstr "Notes"

#: ../Doc/library/marshal.rst:130
msgid ""
"The name of this module stems from a bit of terminology used by the "
"designers of Modula-3 (amongst others), who use the term \"marshalling\" for "
"shipping of data around in a self-contained form. Strictly speaking, \"to "
"marshal\" means to convert some data from internal to external form (in an "
"RPC buffer for instance) and \"unmarshalling\" for the reverse process."
msgstr ""
"Le nom de ce module provient d'un peu de terminologie utilisée par les "
"concepteurs de Modula-3 (entre autres), qui utilisent le terme *marshalling* "
"pour l'envoi de données sous une forme autonome. À proprement parler, *to "
"marshal* signifie convertir certaines données d'une forme interne à une "
"forme externe (dans une mémoire tampon RPC par exemple) et *unmarshalling* "
"désigne le processus inverse."
